window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "panel_helper", "modulename": "panel_helper", "type": "module", "doc": "<p>HoloViz panels management module. We are using Panel (<a href=\"https://panel.holoviz.org\">https://panel.holoviz.org</a>) to create the dashboard panels.</p>\n"}, {"fullname": "panel_helper.create_plot_panel", "modulename": "panel_helper", "qualname": "create_plot_panel", "type": "function", "doc": "<p>Creates a plot panel for a given dataframe and appends a plot using <code>plot_helper.multiplot_grouped_data</code></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>df</code> (pandas.DataFrame) The dataframe to plot</li>\n<li><code>title</code> (str) The title of the plot</li>\n<li><code>id_var</code> (str) The name of the column to use as the id variable</li>\n<li><code>var_name</code> (str) The name of the column to use as the variable name</li>\n<li><code>value_name</code> (str) The name of the column to use as the value name</li>\n<li><code>xlabel</code> (str) The label for the x-axis</li>\n<li><code>ylabel</code> (str) The label for the y-axis</li>\n<li><code>cmap</code> (str) The name of the colormap to use</li>\n<li><code>climit</code> (tuple) The limits of the colorbar</li>\n<li><code>template</code> (panel.Template) The dashboard template</li>\n<li><code>show_loading_msg</code> (bool) Whether to show the loading message or not (Only when creating the plot for the first time)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>plot_panel</code> (panel.Panel) The panel with columns whith the plot and the associated widget.</li>\n</ul>\n", "signature": "(\n    df,\n    title,\n    id_var,\n    var_name,\n    value_name,\n    xlabel,\n    ylabel,\n    cmap,\n    climit,\n    template,\n    show_loading_msg=True\n)", "funcdef": "def"}, {"fullname": "panel_helper.create_l1_rate_plot_panel", "modulename": "panel_helper", "qualname": "create_l1_rate_plot_panel", "type": "function", "doc": "<p>Creates a plot panel for the L1 rate and appends the plot and the widget using <code>plot_helper.plot_l1_rate_data</code></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>data_dict</code> (dict) The dictionary containing the dataframes to plot</li>\n<li><code>title</code> (str) The title of the plot</li>\n<li><code>id_var</code> (str) The name of the column to use as the id variable (x axis of the plot)</li>\n<li><code>var_name</code> (str) The name of the column to use as the variable name</li>\n<li><code>value_name</code> (str) The name of the column to use as the value name (y axis of the plot)</li>\n<li><code>xlabel</code> (str) The label for the x-axis</li>\n<li><code>ylabel</code> (str) The label for the y-axis</li>\n<li><code>cmap</code> (LinearSegmentedColormap): The colormap object based on lookup tables using linear segments.</li>\n<li><code>climit</code> (tuple) The limits of the colorbar</li>\n<li><code>template</code> (panel.Template) The dashboard template</li>\n<li><code>show_loading_msg</code> (bool) Whether to show the loading message or not (Only when creating the plot for the first time)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>plot_panel</code> (panel.Panel) The panel with columns whith the plot and the associated widget.</li>\n</ul>\n", "signature": "(\n    data_dict,\n    title,\n    id_var,\n    var_name,\n    value_name,\n    xlabel,\n    ylabel,\n    cmap,\n    climit,\n    template,\n    show_loading_msg=True\n)", "funcdef": "def"}, {"fullname": "panel_helper.create_l0_ipr_plot_panel", "modulename": "panel_helper", "qualname": "create_l0_ipr_plot_panel", "type": "function", "doc": "<p>Creates a plot panel for the L0 pixel IPR and appends the plot and the widget using <code>plot_helper.plot_l0_ipr_data</code></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>data_dict</code> (dict) The dictionary containing the data to plot (See <code>plot_helper.plot_l0_ipr_data</code> for more info)</li>\n<li><code>title</code> (str) The title of the plot</li>\n<li><code>id_var</code> (str) The name of the column to use as the id variable (x axis of the plot)</li>\n<li><code>var_name</code> (str) The name of the column to use as the variable name (channel, module...)</li>\n<li><code>value_name</code> (str) The name of the column to use as the value name (y axis of the plot)</li>\n<li><code>xlabel</code> (str) The label for the x-axis</li>\n<li><code>ylabel</code> (str) The label for the y-axis</li>\n<li><code>cmap</code> (LinearSegmentedColormap): The colormap object based on lookup tables using linear segments.</li>\n<li><code>climit</code> (tuple) The limits of the colorbar</li>\n<li><code>template</code> (panel.Template) The dashboard template</li>\n<li><code>show_loading_msg</code> (bool) Whether to show the loading message or not (Only when creating the plot for the first time)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>plot_panel</code> (panel.Panel) The panel with columns whith the plot and the associated widget.</li>\n</ul>\n", "signature": "(\n    data_dict,\n    title,\n    id_var,\n    var_name,\n    value_name,\n    xlabel,\n    ylabel,\n    cmap,\n    climit,\n    template,\n    show_loading_msg=True\n)", "funcdef": "def"}, {"fullname": "panel_helper.create_tib_rates_plot_panel", "modulename": "panel_helper", "qualname": "create_tib_rates_plot_panel", "type": "function", "doc": "<p>Creates a plot panel for the TIB rates and appends the plot using <code>plot_helper.plot_tib_rate_data</code></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>data_dict</code> (dict) The dictionary containing the data to plot (See <code>plot_helper.plot_tib_rate_data</code> for more info)</li>\n<li><code>title</code> (str) The title of the plot</li>\n<li><code>xlabel</code> (str) The label for the x-axis</li>\n<li><code>ylabel</code> (str) The label for the y-axis</li>\n<li><code>template</code> (panel.Template) The dashboard template</li>\n<li><code>show_loading_msg</code> (bool) Whether to show the loading message or not (Only when creating the plot for the first time)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>plot_panel</code> (panel.Panel) The panel with columns whith the plot and the associated widget.</li>\n</ul>\n", "signature": "(data_dict, title, xlabel, ylabel, template, show_loading_msg=True)", "funcdef": "def"}, {"fullname": "panel_helper.create_dragon_busy_plot_panel", "modulename": "panel_helper", "qualname": "create_dragon_busy_plot_panel", "type": "function", "doc": "<p>Creates a plot panel for the Dragon busy and appends the plot using <code>plot_helper.plot_dragon_busy_data</code></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>data</code> (pandas.DataFrame) The data to plot</li>\n<li><code>title</code> (str) The title of the plot</li>\n<li><code>xlabel</code> (str) The label for the x-axis</li>\n<li><code>ylabel</code> (str) The label for the y-axis</li>\n<li><code>template</code> (panel.Template) The dashboard template</li>\n<li><code>show_loading_msg</code> (bool) Whether to show the loading message or not (Only when creating the plot for the first time)</li>\n</ul>\n", "signature": "(data, title, xlabel, ylabel, template, show_loading_msg=True)", "funcdef": "def"}, {"fullname": "database", "modulename": "database", "type": "module", "doc": "<p>Database management module</p>\n"}, {"fullname": "database.connect", "modulename": "database", "qualname": "connect", "type": "function", "doc": "<p>Connect to a MongoDB database and return a client object from pymongo.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>host</code>: (str) The host parameter can be a full mongodb URI in addition to a simple hostname or IP.</li>\n<li><code>port</code> (str) Database port</li>\n<li><code>db_name</code> (str) The database name</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>client</code>: A client-side representation of a MongoDB cluster from pymongo. See more at <a href=\"https://pymongo.readthedocs.io/en/3.12.0/api/pymongo/mongo_client.html\">https://pymongo.readthedocs.io/en/3.12.0/api/pymongo/mongo_client.html</a></li>\n</ul>\n", "signature": "(host, port, db_name)", "funcdef": "def"}, {"fullname": "database.get_data_by_date", "modulename": "database", "qualname": "get_data_by_date", "type": "function", "doc": "<p>Get array data from Mongodb collection filtering by date. If the search_previous flag is set to True, the function will search\nfor data in the previous days (until 120 days) if no data is found for the specified date.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>collection</code> (pymongo.collection.Collection) The collection object from pymongo. See more at <a href=\"http://pymongo.readthedocs.io/en/3.12.0/api/pymongo/collection.html?highlight=collection#pymongo.collection.Collection\">http://pymongo.readthedocs.io/en/3.12.0/api/pymongo/collection.html?highlight=collection#pymongo.collection.Collection</a></li>\n<li><code>property_name</code> (str) The name of the property to search in the collection</li>\n<li><code>date_time</code> (dt.date) The date to search in the collection. It will search for data from 12:00pm on the selected day until 12:00 the following day.</li>\n<li><code>value_field</code> (str) The name of the field to retrieve from the collection</li>\n<li><code>id_var</code> (str) The name of the id variable</li>\n<li><code>var_name</code> (str) The name of the variable (channel, module)</li>\n<li><code>value_name</code> (str) The name of the value</li>\n<li><code>search_previous</code> (bool) Flag to search for data in the previous days if no data is found for the specified date. True by default.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>pandas_df</code> A pandas dataframe with the data retrieved from the collection, in case no data is found, the function will return and empty dataframe.</li>\n</ul>\n", "signature": "(\n    collection,\n    property_name,\n    date_time,\n    value_field,\n    id_var,\n    var_name,\n    value_name,\n    search_previous=True\n)", "funcdef": "def"}, {"fullname": "database.get_scalar_data_by_date", "modulename": "database", "qualname": "get_scalar_data_by_date", "type": "function", "doc": "<p>Get scalar data from a Mongodb collection filtering by date. If the search_previous flag is set to True, the function will search\nfor data in the previous days (until 120 days) if no data is found for the specified date.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>collection</code> (pymongo.collection.Collection) The collection object from pymongo. See more at <a href=\"http://pymongo.readthedocs.io/en/3.12.0/api/pymongo/collection.html?highlight=collection#pymongo.collection.Collection\">http://pymongo.readthedocs.io/en/3.12.0/api/pymongo/collection.html?highlight=collection#pymongo.collection.Collection</a></li>\n<li><code>property_name</code> (str) The name of the property to search in the collection</li>\n<li><code>date_time</code> (dt.date) The date to search in the collection. It will search for data from 12:00pm on the selected day until 12:00 the following day.</li>\n<li><code>value_field</code> (str) The name of the field to retrieve from the collection</li>\n<li><code>value_name</code> (str) The name of the value</li>\n<li><code>search_previous</code> (bool) Flag to search for data in the previous days if no data is found for the specified date. True by default.</li>\n<li><code>remove_zero_values</code> (bool) Boolean flag to remove zero values from the dataframe. False by default.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>pandas_df</code> A pandas dataframe with the data retrieved from the collection. In case no data is found, the function will return and empty dataframe.</li>\n</ul>\n", "signature": "(\n    collection,\n    property_name,\n    date_time,\n    value_field,\n    value_name,\n    search_previous=True,\n    remove_zero_values=False\n)", "funcdef": "def"}, {"fullname": "dashboard_utils", "modulename": "dashboard_utils", "type": "module", "doc": "<p></p>\n"}, {"fullname": "dashboard_utils.create_dashboard", "modulename": "dashboard_utils", "qualname": "create_dashboard", "type": "function", "doc": "<p>Creates the dashboard with all the panel plots with the given template and date filter and shows it in the browser.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>template</code> (pn.template.MaterialTemplate) The template to use for the dashboard.</li>\n<li><code>date_filter</code> (date) The date filter to use for the dashboard. Defaults to today.</li>\n<li><code>update</code> (bool) Whether to update the dashboard or is a new creation. Defaults to False.</li>\n</ul>\n", "signature": "(template, date_filter=datetime.date(2023, 5, 29), update=False)", "funcdef": "def"}, {"fullname": "dashboard_utils.update_loading_message", "modulename": "dashboard_utils", "qualname": "update_loading_message", "type": "function", "doc": "<p>Updates and shows a loading message in the dashboard while deploying it for the first time.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>template</code> (pn.template.MaterialTemplate) The template object from panel.</li>\n<li><code>message</code> (str) The message to display in the loading screen.</li>\n</ul>\n", "signature": "(template: panel.template.material.MaterialTemplate, message: str)", "funcdef": "def"}, {"fullname": "dashboard_utils.display_database_error", "modulename": "dashboard_utils", "qualname": "display_database_error", "type": "function", "doc": "<p>Display a message in the dashboard when the connection to the database fails.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>template</code> (pn.template.MaterialTemplate) The template object from panel.</li>\n</ul>\n", "signature": "(template: panel.template.material.MaterialTemplate)", "funcdef": "def"}, {"fullname": "plot_helper", "modulename": "plot_helper", "type": "module", "doc": "<p>HoloViz plots management module. We are using hvPlot (<a href=\"https://hvplot.holoviz.org\">https://hvplot.holoviz.org</a>) and Holoviews (<a href=\"https://holoviews.org\">https://holoviews.org</a>) to create the plots.</p>\n"}, {"fullname": "plot_helper.hvplot_df_line", "modulename": "plot_helper", "qualname": "hvplot_df_line", "type": "function", "doc": "<p>Plots a line graph - using hvPlot - from a pandas dataframe.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>df</code> (pandas.DataFrame): The dataframe to plot.</li>\n<li><code>x</code> (str): The name of the column to use as x axis.</li>\n<li><code>y</code> (str): The name of the column to use as y axis.</li>\n<li><code>title</code> (str): The title of the plot.</li>\n<li><code>dic_opts</code> (dict): A dictionary with the options to pass to the plot created with hvPlot. See more at <a href=\"https://hvplot.holoviz.org/user_guide/Customization.html\">https://hvplot.holoviz.org/user_guide/Customization.html</a></li>\n<li><code>color</code> (str): The color of the line. Green by default.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>dynamic_map</code> (holoviews.core.spaces.DynamicMap): The holoviews Dynamic map created with hvPlot.</li>\n</ul>\n", "signature": "(\n    df: pandas.core.frame.DataFrame,\n    x: str,\n    y: str,\n    title: str,\n    dic_opts: dict,\n    color: str = 'green'\n)", "funcdef": "def"}, {"fullname": "plot_helper.hvplot_df_grouped_line", "modulename": "plot_helper", "qualname": "hvplot_df_grouped_line", "type": "function", "doc": "<p>Plots a line graph - using hvPlot - from a pandas dataframe grouping by a column in the dataframe. hvPlot will create a widget to select the group to plot.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>df</code> (pandas.DataFrame): The dataframe to plot.</li>\n<li><code>x</code> (str): The name of the column to use as x axis.</li>\n<li><code>y</code> (str): The name of the column to use as y axis.</li>\n<li><code>title</code> (str): The title of the plot.</li>\n<li><code>dic_opts</code> (dict): A dictionary with the options to pass to the plot created with hvPlot. See more at <a href=\"https://hvplot.holoviz.org/user_guide/Customization.html\">https://hvplot.holoviz.org/user_guide/Customization.html</a></li>\n<li><code>groupby</code> (str): The name of the column to use to group the dataframe.</li>\n<li><code>color</code> (str): The color of the line.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>dynamic_map</code> (holoviews.core.spaces.DynamicMap): A DynamicMap instance from Holoviews created with hvPlot. See more at <a href=\"https://holoviews.org/reference/containers/plotly/DynamicMap.html\">https://holoviews.org/reference/containers/plotly/DynamicMap.html</a></li>\n</ul>\n", "signature": "(\n    df: pandas.core.frame.DataFrame,\n    x,\n    y,\n    title: str,\n    dic_opts: dict,\n    groupby: str,\n    color: str = 'green'\n)", "funcdef": "def"}, {"fullname": "plot_helper.hvplot_df_max_min_avg_line", "modulename": "plot_helper", "qualname": "hvplot_df_max_min_avg_line", "type": "function", "doc": "<p>Plots lines graphs - using hvPlot - from a pandas dataframe with max, min and avg columns</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>df</code> (pandas.DataFrame): The dataframe to plot with max, min and avg columns.</li>\n<li><code>x</code> (str): The name of the column to use as x axis.</li>\n<li><code>title</code> (str): The title of the plot.</li>\n<li><code>dic_opts</code> (dict): A dictionary with the options to pass to the plot created with hvPlot. See more at <a href=\"https://hvplot.holoviz.org/user_guide/Customization.html\">https://hvplot.holoviz.org/user_guide/Customization.html</a></li>\n<li><code>category</code> (str): The name of the variable to plot (channel, module...)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>composite_plots</code> (holoviews.core.overlay.Overlay): The composited plots created with hvPlot.</li>\n</ul>\n", "signature": "(df, x, title, dic_opts, category)", "funcdef": "def"}, {"fullname": "plot_helper.hvplot_df_scatter", "modulename": "plot_helper", "qualname": "hvplot_df_scatter", "type": "function", "doc": "<p>Plots a scatter graph - using hvPlot - from a pandas dataframe.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>df</code> (pandas.DataFrame): The dataframe to plot.</li>\n<li><code>x</code> (str): The name of the dataframe column to use as x axis.</li>\n<li><code>y</code> (str): The name of the dataframe column to use as y axis.</li>\n<li><code>title</code> (str): The title of the plot.</li>\n<li><code>color</code> (str): The name of the dataframe column to use to color the points.</li>\n<li><code>size</code> (int): The size of the points.</li>\n<li><code>marker</code> (str): The marker of the points.</li>\n<li><code>dic_opts</code> (dict): A dictionary with the options to pass to the plot created with hvPlot. See more at <a href=\"https://hvplot.holoviz.org/user_guide/Customization.html\">https://hvplot.holoviz.org/user_guide/Customization.html</a></li>\n<li><code>cmap</code> (LinearSegmentedColormap): The colormap object based on lookup tables using linear segments.</li>\n<li><code>groupby</code> (str): The name of the dataframe column to use to group the points.</li>\n<li><code>datashade</code> (bool): Whether to use datashade or not.</li>\n<li><code>rasterize</code> (bool): Whether to use rasterize or not.</li>\n<li><code>dynamic</code> (bool): Whether to use dynamic or not.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>plot</code> (holoviews.core.spaces.DynamicMap): A DynamicMap instance from Holoviews created with hvPlot. See more at <a href=\"https://holoviews.org/reference/containers/plotly/DynamicMap.html\">https://holoviews.org/reference/containers/plotly/DynamicMap.html</a></li>\n</ul>\n", "signature": "(\n    df,\n    x,\n    y,\n    title,\n    color,\n    size,\n    marker,\n    dic_opts,\n    cmap='reds',\n    groupby=None,\n    datashade=False,\n    rasterize=False,\n    dynamic=True\n)", "funcdef": "def"}, {"fullname": "plot_helper.create_empty_plot", "modulename": "plot_helper", "qualname": "create_empty_plot", "type": "function", "doc": "<p>Creates an empty plot with a text indicating that there is no data available in the selected date.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>empty_plot</code> (holoviews.core.spaces.DynamicMap) A DynamicMap instance from Holoviews created with hvPlot. See more at <a href=\"https://holoviews.org/reference/containers/plotly/DynamicMap.html\">https://holoviews.org/reference/containers/plotly/DynamicMap.html</a></li>\n</ul>\n", "signature": "()", "funcdef": "def"}, {"fullname": "plot_helper.build_min_max_avg", "modulename": "plot_helper", "qualname": "build_min_max_avg", "type": "function", "doc": "<p>Builds a dataframe with the max, min and avg values for each date.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>df</code> (pandas.DataFrame): The dataframe to process.</li>\n<li><code>x</code> (str): The name of the column to use as x axis.</li>\n<li><code>y</code> (str): The name of the column to use as y axis.</li>\n<li><code>category</code> (str): The name of the variable to plot (channel, module...)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>df_agg</code> (pandas.DataFrame): The dataframe with the max, min and avg values for each date.</li>\n</ul>\n", "signature": "(df, x, y, category)", "funcdef": "def"}, {"fullname": "plot_helper.disable_logo", "modulename": "plot_helper", "qualname": "disable_logo", "type": "function", "doc": "<p>Hook to disable the Bokeh logo in the plot.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>plot</code> (holoviews.plotting.bokeh.ElementPlot): The plot to disable the logo. (Automatically passed by HoloViews)</li>\n<li><code>element</code> (holoviews.element.chart.Chart): The element to disable the logo. (Automatically passed by HoloViews)</li>\n</ul>\n", "signature": "(plot, element)", "funcdef": "def"}, {"fullname": "plot_helper.multiplot_grouped_data", "modulename": "plot_helper", "qualname": "multiplot_grouped_data", "type": "function", "doc": "<p>Composite Plot with:</p>\n\n<ul>\n<li>max, min and average lines</li>\n<li>line for the selected group (channel, module)</li>\n<li>The scattered points corresponding to the selected group/var name (channel, module...)</li>\n<li>The rasterized scattered points for all group/var name available in the dataframe (channels, modules...)</li>\n</ul>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>data</code> (pandas.DataFrame): The dataframe with the data to plot.</li>\n<li><code>x</code> (str): The name of the column to use as x axis.</li>\n<li><code>y</code> (str): The name of the column to use as y axis.</li>\n<li><code>title</code> (str): The title of the plot.</li>\n<li><code>xlabel</code> (str): The label of the x axis.</li>\n<li><code>ylabel</code> (str): The label of the y axis.</li>\n<li><code>groupby</code> (str): The name of the variable to plot (channel, module...)</li>\n<li><code>cmap_custom</code> (LinearSegmentedColormap): The colormap object based on lookup tables using linear segments.</li>\n<li><code>clim</code> (tuple): The min and max values for the colormap.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>composite_plot</code> (holoviews.core.overlay.Overlay): The composited plots created with hvPlot.</li>\n</ul>\n", "signature": "(data, x, y, title, xlabel, ylabel, groupby, cmap_custom, clim)", "funcdef": "def"}, {"fullname": "plot_helper.plot_l1_rate_data", "modulename": "plot_helper", "qualname": "plot_l1_rate_data", "type": "function", "doc": "<p>Composite plot for L1 rate data. It shows:\n    - max, min and average lines\n    - line for the selected channel\n    - The scattered points corresponding to the selected channel\n    - The rasterized scattered points for the values from all channels</p>\n\n<pre><code>Other parameters beingh plotted with this data:\n - L1 Rate control\n - L1 Rate max\n - L1 Rate target\n - L0 Rate Control\n</code></pre>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>data_dict</code> (dict): The dictionary with the data to plot. It should contain the following keys: \n<ul>\n<li><code>l1_rate</code> (pandas.DataFrame): The dataframe with the l1 rate data to plot.</li>\n<li><code>l1_rate_control</code> (pandas.DataFrame): The dataframe with the l1 rate control data to plot.</li>\n<li><code>l1_rate_max</code> (pandas.DataFrame): The dataframe with the l1 rate max data to plot.</li>\n<li><code>l1_rate_target</code> (pandas.DataFrame): The dataframe with the l1 rate target data to plot.</li>\n<li><code>l0_rate_control</code> (pandas.DataFrame): The dataframe with the l0 rate control data to plot.</li>\n</ul></li>\n<li><code>x</code> (str): The name of the column to use as x axis.</li>\n<li><code>y</code> (str): The name of the column to use as y axis.</li>\n<li><code>title</code> (str): The title of the plot.</li>\n<li><code>xlabel</code> (str): The label of the x axis.</li>\n<li><code>ylabel</code> (str): The label of the y axis.</li>\n<li><code>groupby</code> (str): The name of the variable to plot (channel, module...)</li>\n<li><code>cmap_custom</code> (LinearSegmentedColormap): The colormap object based on lookup tables using linear segments.</li>\n<li><code>clim</code> (tuple): The min and max values for the colormap.</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>composite_plot</code> (holoviews.core.overlay.Overlay): The composited plots created with hvPlot.</li>\n</ul>\n", "signature": "(data_dict, x, y, title, xlabel, ylabel, groupby, cmap_custom, clim)", "funcdef": "def"}, {"fullname": "plot_helper.plot_l0_ipr_data", "modulename": "plot_helper", "qualname": "plot_l0_ipr_data", "type": "function", "doc": "<p>Plot L0 IPR data and L0 Rate Max data in a plot.</p>\n\n<p>The composite plot for L0 IPR data is composed by:\n    - Lines plot with the max, min and average values for each date\n    - Scatter plot with all the data for each channel\n    - The scattered points corresponding with the values from the selected channel\n    - The rasterized scattered points for the values from all channels</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><p><code>data_dict</code> (dict): The dictionary with the data to plot. It should contain the following keys: </p>\n\n<ul>\n<li><code>l0_pixel_ipr</code>: Dataframe with the L0 IPR data</li>\n<li><code>l0_rate_max</code>: Dataframe with the L0 Rate Max data</li>\n</ul></li>\n<li><p><code>x</code> (str): Name of the column to be used as x axis</p></li>\n<li><code>y</code> (str): Name of the column to be used as y axis</li>\n<li><code>title</code> (str) : Title of the plot</li>\n<li><code>xlabel</code> (str): Label for the x axis</li>\n<li><code>ylabel</code> (str): Label for the y axis</li>\n<li><code>groupby</code> (str): Name of the column to be used to group the data (e.g. channel)</li>\n<li><code>cmap_custom</code> (LinearSegmentedColormap): Custom colormap to be used for the scatter plot</li>\n<li><code>clim</code> (tuple): Color limits for the scatter plot</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>composite_plot</code> (holoviews.core.overlay.Overlay): The composited plots created with hvPlot.</li>\n</ul>\n", "signature": "(data_dict, x, y, title, xlabel, ylabel, groupby, cmap_custom, clim)", "funcdef": "def"}, {"fullname": "plot_helper.plot_tib_rate_data", "modulename": "plot_helper", "qualname": "plot_tib_rate_data", "type": "function", "doc": "<p>Plot the TIB Rates data</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>data_dict</code> (dict): The dictionary with the data to plot. It should contain the following keys:\n<ul>\n<li><code>tib_busy_rate</code>: Dataframe with the TIB Busy Rate data</li>\n<li><code>tib_calibration_rate</code>: Dataframe with the TIB Calibration Rate data</li>\n<li><code>tib_camera_rate</code>: Dataframe with the TIB Camera Rate data</li>\n<li><code>tib_local_rate</code>: Dataframe with the TIB Local Rate data</li>\n<li><code>tib_pedestal_rate</code>: Dataframe with the TIB Pedestal Rate data</li>\n</ul></li>\n<li><code>title</code> (str): Title of the plot</li>\n<li><code>xlabel</code> (str): Label for the x axis</li>\n<li><code>ylabel</code> (str): Label for the y axis</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<ul>\n<li><code>composite_plot</code> (holoviews.core.overlay.Overlay): The composited plots created with hvPlot.</li>\n</ul>\n", "signature": "(data_dict, title, xlabel, ylabel)", "funcdef": "def"}, {"fullname": "plot_helper.plot_dragon_busy_data", "modulename": "plot_helper", "qualname": "plot_dragon_busy_data", "type": "function", "doc": "<p>Plot the Dragon Busy data. It will create a scatter plot with the busy status of the modules.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<ul>\n<li><code>data</code> (pandas.core.frame.DataFrame): The dataframe with the data to plot</li>\n<li><code>title</code> (str): Title of the plot</li>\n<li><code>xlabel</code> (str): Label for the x axis</li>\n<li><code>ylabel</code> (str): Label for the y axis</li>\n</ul>\n", "signature": "(data, title, xlabel, ylabel)", "funcdef": "def"}, {"fullname": "config", "modulename": "config", "type": "module", "doc": "<p>This file contains all the configuration variables to connect to the database and setup the websocket origin. All the variables are loaded from the .env file.</p>\n"}, {"fullname": "config.DB_HOST", "modulename": "config", "qualname": "DB_HOST", "type": "variable", "doc": "<p>The host of the database</p>\n", "default_value": " = 'localhost'"}, {"fullname": "config.DB_PORT", "modulename": "config", "qualname": "DB_PORT", "type": "variable", "doc": "<p>The port of the database</p>\n", "default_value": " = 3333"}, {"fullname": "config.DB_NAME", "modulename": "config", "qualname": "DB_NAME", "type": "variable", "doc": "<p>The name of the database</p>\n", "default_value": " = 'db_name'"}, {"fullname": "config.WEBSOCKET_ORIGIN", "modulename": "config", "qualname": "WEBSOCKET_ORIGIN", "type": "variable", "doc": "<p>The origin of the websocket</p>\n", "default_value": " = 'localhost'"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();